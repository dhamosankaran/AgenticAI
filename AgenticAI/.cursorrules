# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g., version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Project Overview

This project is a **Financial Investment Advisor Agent** that provides personalized investment recommendations based on user financial goals, risk tolerance, and market conditions.

## Core Features
* **Personalized Guidance**: Automated yet personalized financial advice
* **Informed Decisions**: Data-driven investment recommendations
* **Educational Value**: Explanations of investment reasoning
* **Time Efficiency**: Quick analysis of complex financial scenarios
* **Cost Effectiveness**: Financial advice without high costs

## Technical Architecture
* **Framework**: FastAPI
* **Language**: Python
* **API Layer**: FastAPI
* **Data Sources**: Alpha Vantage API

# Project-Specific Rules

1. **File and Directory Structure:**
```
financial-advisor-agent/
├── src/
│   ├── api/             # FastAPI endpoints
│   ├── services/        # Business logic and services
│   └── utils/           # Utility functions
├── frontend/            # React frontend
├── tests/               # Test suite
├── docs/                # Documentation
├── config/              # Configuration files
└── requirements.txt     # Project dependencies
```

2. **API Keys:**
* Store API keys in a `.env` file (use `.env.example` as a template)
* Use `python-dotenv`
* Example `.env.example`:
```
ALPHA_VANTAGE_API_KEY=
```
**DONT COMMIT THE .ENV FILE TO GIT**

3. **Financial Data Integration:**
* Use Alpha Vantage for market data
* Implement proper caching for API calls
* Handle rate limits and API errors gracefully

4. **Risk Assessment:**
* Implement basic risk scoring
* Consider age, income, goals
* Provide clear risk tolerance categories
* Document risk assessment methodology

5. **Investment Recommendations:**
* Base recommendations on user profile and market conditions
* Provide clear explanations for recommendations
* Include basic asset allocation

6. **Error Handling:**
* Implement basic error handling
* Provide informative error messages
* Handle API and data processing errors
* Log errors appropriately

7. **Testing:**
* Write unit tests for all components
* Test edge cases and error conditions
* Mock external API calls in tests
* Maintain basic test coverage

# Tools

* **Backend**: Python, FastAPI, Pydantic, pandas
* **Data Sources**: Alpha Vantage API
* **Testing**: pytest, pytest-asyncio, httpx
* **Documentation**: Markdown, Swagger/OpenAPI

# Lessons

* **API Keys**: Always use environment variables for API keys. Never commit API keys.
* **Virtual Environment**: Always activate the virtual environment before running commands.
* **Financial Data**: Cache API responses to avoid rate limits and improve performance.
* **Error Handling**: Implement basic error handling for all API calls and data processing.
* **Testing**: Write basic tests, especially for financial calculations.
* **Documentation**: Keep documentation up-to-date with code changes.
* **Data Validation**: Validate all user inputs and API responses.
* **Rate Limiting**: Implement basic rate limiting for external API calls.
* **Caching**: Use basic caching for market data.
* **Security**: Follow basic security practices.
* **Logging**: Implement basic logging for debugging.
* **Performance**: Optimize basic performance.
* **Maintainability**: Follow clean code principles.

# Scratchpad

Current Task: [ ] Initial Project Setup
Project Status: Planning Phase

## Implementation Phases

### Phase 1: Basic Setup [ ]
[ ] Create project structure
[ ] Set up environment
[ ] Install dependencies
[ ] Configure basic settings

### Phase 2: Core Features [ ]
[ ] Implement basic API
[ ] Create frontend interface
[ ] Add basic functionality
[ ] Implement testing

### Phase 3: Enhancement [ ]
[ ] Add advanced features
[ ] Improve user interface
[ ] Enhance documentation
[ ] Optimize performance

### Phase 4: Finalization [ ]
[ ] Complete testing
[ ] Finalize documentation
[ ] Prepare for deployment
[ ] Create user guide

# Progress Tracking
- [ ] Project initialization
- [ ] Basic setup complete
- [ ] Core features implemented
- [ ] Testing completed
- [ ] Documentation finished
- [ ] Ready for deployment

# Next Steps
1. Complete project setup
2. Implement basic features
3. Add testing
4. Create documentation
5. Prepare for deployment

# Notes
- Keep instructions simple
- Provide clear examples
- Document all steps
- Include troubleshooting
- Consider user experience

# Financial Investment Advisor Agent - AI Assistant Rules

# User Profile
- Target Audience: Non-technical users
- Technical Level: Basic computer literacy
- Goals: Build a functional investment advisor application
- Pain Points: Limited coding experience, need for clear guidance

# Communication Guidelines
1. Use simple, non-technical language
2. Break down complex concepts into smaller, digestible parts
3. Provide step-by-step instructions
4. Include visual examples where possible
5. Explain technical terms in plain language
6. Offer multiple solutions when possible
7. Provide context for each step

# Code Generation Rules
1. Write clear, well-documented code
2. Use meaningful variable and function names
3. Include comments explaining complex logic
4. Follow best practices for readability
5. Implement proper error handling
6. Add type hints for better understanding
7. Keep functions small and focused

# File Structure Guidelines
1. Maintain consistent file organization
2. Use clear file naming conventions
3. Group related files together
4. Keep file sizes manageable
5. Document file purposes

# Testing Guidelines
1. Write clear test cases
2. Explain test purposes
3. Use meaningful test names
4. Include basic error cases
5. Document test requirements

# Documentation Requirements
1. Keep documentation up-to-date
2. Use clear, simple language
3. Include examples
4. Provide context
5. Document assumptions
6. Include troubleshooting guides

# Error Handling
1. Provide clear error messages
2. Include recovery steps
3. Document common issues
4. Offer alternative solutions
5. Explain error causes

# Security Guidelines
1. Protect sensitive data
2. Use environment variables
3. Implement basic authentication
4. Follow security best practices
5. Document security measures

# Performance Guidelines
1. Optimize for readability
2. Consider basic performance
3. Document performance considerations
4. Include basic caching
5. Explain optimization choices

# Maintenance Guidelines
1. Keep code organized
2. Document changes
3. Update dependencies
4. Maintain documentation
5. Follow version control best practices

# Lessons Learned
1. Start with simple implementations
2. Build incrementally
3. Test thoroughly
4. Document as you go
5. Keep security in mind
6. Consider user experience
7. Plan for maintenance

# Scratchpad
Current Task: [ ] Initial Project Setup
Project Status: Planning Phase

## Implementation Phases

### Phase 1: Basic Setup [ ]
[ ] Create project structure
[ ] Set up environment
[ ] Install dependencies
[ ] Configure basic settings

### Phase 2: Core Features [ ]
[ ] Implement basic API
[ ] Create frontend interface
[ ] Add basic functionality
[ ] Implement testing

### Phase 3: Enhancement [ ]
[ ] Add advanced features
[ ] Improve user interface
[ ] Enhance documentation
[ ] Optimize performance

### Phase 4: Finalization [ ]
[ ] Complete testing
[ ] Finalize documentation
[ ] Prepare for deployment
[ ] Create user guide

# Progress Tracking
- [ ] Project initialization
- [ ] Basic setup complete
- [ ] Core features implemented
- [ ] Testing completed
- [ ] Documentation finished
- [ ] Ready for deployment

# Next Steps
1. Complete project setup
2. Implement basic features
3. Add testing
4. Create documentation
5. Prepare for deployment

# Notes
- Keep instructions simple
- Provide clear examples
- Document all steps
- Include troubleshooting
- Consider user experience 